# Geany's snippets configuration file
#
# use \n or %newline% for a new line (it will be replaced by the used EOL char(s) - LF, CR/LF, CR).
# use \t or %ws% for an indentation step, it will be replaced according to the current document's indent mode.
# use \s to force whitespace at beginning or end of a value ('key= value' won't work, use 'key=\svalue').
# use %key% for all keys defined in the [Special] section.
# use %cursor% to define where the cursor should be placed after completion. You can define multiple
#     %cursor% wildcards and use the "Move cursor in snippet" to jump to the next defined cursor
#     position in the completed snippet.
# You can define a section for each supported filetype to overwrite default settings, the section
# name must match exactly the internal filetype name, run 'geany --ft-names' for a full list.
#
# Additionally, you can use most of the template wildcards like {developer}, {command:...},
# or {date} in the snippets.
# See the documentation for details.

# For a list of available filetype names, execute:
# geany --ft-names

# Default is used for all filetypes and keys can be overwritten by [filetype] sections
[Default]

# special keys to be used in other snippets, cannot be used "standalone"
# can be used by %key%, e.g. %brace_open%
# nesting of special keys is not supported (e.g. brace_open=\n{\n%brace_close% won't work)
# key "wordchars" is very special, it defines the word delimiting characters when looking for
# a word to auto complete, leave commented to use the default wordchars
[Special]
brace_open={\n\t
brace_close=}\n
block=\s{\n\t%cursor%\n}
block_cursor=\s{\n\t%cursor%\n}
#wordchars=_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

# Optional keybindings to insert snippets
# Note: these can be overridden by Geany's configurable keybindings

# C++ at the end


[C]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%


[Java]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (int i = 0; i < %cursor%; i++)%brace_open%\n%brace_close%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
try=try%block%\ncatch (%cursor%)%block_cursor%

[PHP]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for ($i = 0; $i < %cursor%; $i++)%brace_open%\n%brace_close%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
try=try%block%\ncatch (%cursor%)%block_cursor%

[Javascript]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
try=try%block%\ncatch (%cursor%)%block_cursor%

[C#]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
try=try%block%\ncatch (%cursor%)%block_cursor%

[Vala]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
try=try%block%\ncatch (%cursor%)%block_cursor%

[ActionScript]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
try=try%block%\ncatch (%cursor%)%block_cursor%

[Python]
for=for i in xrange(%cursor%):\n\t
if=if %cursor%:\n\t
elif=elif %cursor%:\n\t
else=else:\n\t
while=while %cursor%:\n\t
try=try:\n\t%cursor%\nexcept Exception, ex:\n\t
with=with %cursor%:\n\t
def=def %cursor% (%cursor%):\n\t""" Function doc """\n\t
class=class %cursor%:\n\t""" Class doc """\n\t\n\tdef __init__ (self):\n\t\t""" Class initialiser """\n\t\tpass

[Ferite]
iferr=iferr%block_cursor%fix%block%
monitor=monitor%block_cursor%handle%block%

[Haskell]

[HTML]
table=<table>\n\t<tr>\n\t\t<td>%cursor%</td>\n\t</tr>\n</table>

[Erlang]
case=case %cursor% of\n\t%cursor% -> %cursor%\nend
if=if\n\t%cursor% -> %cursor%\nend
begin=begin\n\t%cursor%\nend
fun=fun(%cursor%) ->\n\t%cursor%\nend
try=try %cursor% of\n\t%cursor% ->\n\t%cursor%\ncatch\n\t%cursor% ->\n\t%cursor%\nend
module=-module(%cursor%).
export=-export(%cursor%).
compile=-compile(%cursor%).
include=-include(%cursor%).


[C++]
xm=const int MOD = 998244353;%cursor%\ninline int add(int a, int b, int mod = MOD) {\n\ta += b; return a >= mod ? a - mod : a;\n}\ninline int sub(int a, int b, int mod = MOD) {\n\ta -= b; return a < 0 ? a + mod : a;\n}\ninline int mul(int a, int b, int mod = MOD) {\n\treturn int((long long) a * b % mod);\n}\ninline int mpow(int base, long long ex, int mod = MOD) {\n\tint res = 1;\n\tfor (; ex > 0; ex >>= 1) {\n\t\tif (ex & 1) res = mul(res, base, mod);\n\t\tbase = mul(base, base, mod);\n\t}\n\treturn res;\n}\ninline int inv(int a, int mod = MOD) {\n\treturn mpow(a, mod - 2, mod);\n}\ninline int mdiv(int a, int b, int mod = MOD) {\n\treturn mul(a, mpow(b, mod - 2,\tmod));\n}\ninline void adds(int &a, int b, int mod = MOD) {\n\ta += b; if (a >= mod) a -= mod;\n}\ninline void subs(int &a, int b, int mod = MOD) {\n\ta -= b; if (a < 0) a += mod;\n}\ninline void muls(int &a, int b, int mod = MOD) {\n\ta = int((long long) a * b % mod);\n}\ninline void mdivs(int &a, int b, int mod = MOD) {\n\ta = mdiv(a, b, mod);\n}\nvector<int> fac, ifac;%cursor%\nvoid prep_fact(int nax = 1e6 + 40) {\n\tfac.resize(nax);\n\tifac.resize(nax);\n\tfac[0] = 1;\n\tfor (int i = 1; i < nax; ++i) fac[i] = mul(i, fac[i - 1]);\n\tifac[nax - 1] = inv(fac[nax - 1]);\n\tfor (int i = nax - 1; i > 0; --i) ifac[i - 1] = mul(i, ifac[i]);\n}\ninline int ncr(int n, int r) {\n\tif (n < r || r < 0 || n < 0) return 0;\n\treturn mul(fac[n], mul(ifac[n - r], ifac[r]));\n}\n\n%cursor%

xg=vector<vector<int>> g(n);\nfor (int i = 0; i < %cursor%; ++i) {\n\tint u, v; cin >> u >> v;\n\t--u, --v;\n\tg[u].push_back(v);\n\tg[v].push_back(u);\n}%cursor%

xc=#include <bits/stdc++.h>\nusing namespace std;\n#define SZ(v) int((v).size())\n#define ALL(vec) begin(vec), end(vec)\ntypedef long long i64;\ntemplate<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}\ntemplate<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}\n#ifdef Rahul\n# define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \\\n\tstringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }\n#else\n# define error(...) 42;\n#endif\nstring to_string(char c) { return "'" + string(1, c) + "'";}\nstring to_string(string s) { return '"' + s + '"';}\nstring to_string(const char* s) { return to_string((string) s);}\ntemplate<typename A> string to_string(A);\ntemplate<typename A, typename B> string to_string(pair<A, B> p){\n\treturn "(" + to_string(p.first) + ": " + to_string(p.second) + ")";}\ntemplate<typename A> string to_string(A v) {bool f = false; string r = "{"; \n\tfor (auto x: v) {if (f) r += ", "; r += to_string(x); f = true;} return r += "}";}\ntemplate<typename A> string to_string(vector<vector<A>> v) {string r; \n\tfor (auto x: v) r += "\\n" + to_string(x); return r;}\nint Nerr;\ntemplate<typename A> string to_string(A *p) {return to_string(vector<A>(p, p + Nerr));}\nvoid err(istream_iterator<string>) { cerr << endl; }\ntemplate<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {\n\tcerr << *it << " =: " << to_string(a) << "; "; err(++it, args...); }\ntemplate<typename T> void kek(T ans) {cout << ans << endl; exit(0);}\n#define Lu(...) [&] (auto &&u) { return __VA_ARGS__; }\n#define Luv(...) [&] (auto &&u, auto &&v) { return __VA_ARGS__; }\nint const MOD = 1e9 + 7;\ni64 const INF = 1e18 + 42;\n/***********************************************************************/\n\nint32_t main() {\n\tcin.tie(nullptr) -> sync_with_stdio(false);\n\t\n}
