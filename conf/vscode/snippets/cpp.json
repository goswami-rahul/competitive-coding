{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Test Cases with int": {
		"prefix": "test int",
		"isFileTemplate": true,
		"body": "#ifdef Rahul\n#include \"RAHUL.h\"\n#else\n#include <bits\/stdc++.h>\nusing namespace std;\n#define error(...) 42;\n#endif\n#define SZ(v) static_cast<int>((v).size())\n#define ALL(vec) begin(vec), end(vec)\ntemplate<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}\ntemplate<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}\n#define Luv(...) [&] (auto &&u, auto &&v) { return __VA_ARGS__; }\nusing i64 = int64_t;\nconst int MOD = (int) 1e9 + 7;\nconst i64 INF = (i64) 1e18 + 42;\n\nint SolveCase() {\n  $0\n}\n\nint32_t main() {\n  cin.tie(nullptr) -> sync_with_stdio(false);\n  int tt; cin >> tt;\n  while (tt--) cout << SolveCase() << '\\n';\n}"
	},
	"Test Cases with bool": {
		"prefix": "test bool",
		"isFileTemplate": true,
		"body": "#ifdef Rahul\n#include \"RAHUL.h\"\n#else\n#include <bits\/stdc++.h>\nusing namespace std;\n# define error(...) 42;\n#endif\n#define SZ(v) static_cast<int>((v).size())\n#define ALL(vec) begin(vec), end(vec)\ntemplate<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}\ntemplate<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}\n#define Luv(...) [&] (auto &&u, auto &&v) { return __VA_ARGS__; }\nusing i64 = int64_t;\nconst int MOD = (int) 1e9 + 7;\nconst i64 INF = (i64) 1e18 + 42;\n\nbool SolveCase() {\n  $0\n}\n\nint32_t main() {\n  cin.tie(nullptr) -> sync_with_stdio(false);\n  int tt; cin >> tt;\n  while (tt--) cout << (SolveCase() ? \"Yes\" : \"No\") << '\\n';\n}"
	},
	"Test Case single": {
		"prefix": "test single",
		"isFileTemplate": true,
		"body": "#ifdef Rahul\n#include \"RAHUL.h\"\n#else\n#include <bits\/stdc++.h>\nusing namespace std;\n# define error(...) 42;\n#endif\n#define SZ(v) static_cast<int>((v).size())\n#define ALL(vec) begin(vec), end(vec)\ntemplate<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}\ntemplate<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}\n#define Luv(...) [&] (auto &&u, auto &&v) { return __VA_ARGS__; }\nusing i64 = int64_t;\nconst int MOD = (int) 1e9 + 7;\nconst i64 INF = (i64) 1e18 + 42;\n\nint32_t main() {\n  cin.tie(nullptr) -> sync_with_stdio(false);\n  $0\n}"
	},
	"Test Cases with void": {
		"prefix": "test void",
		"isFileTemplate": true,
		"body": "#ifdef Rahul\n#include \"RAHUL.h\"\n#else\n#include <bits\/stdc++.h>\nusing namespace std;\n# define error(...) 42;\n#endif\n#define SZ(v) static_cast<int>((v).size())\n#define ALL(vec) begin(vec), end(vec)\ntemplate<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}\ntemplate<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}\n#define Luv(...) [&] (auto &&u, auto &&v) { return __VA_ARGS__; }\nusing i64 = int64_t;\nconst int MOD = (int) 1e9 + 7;\nconst i64 INF = (i64) 1e18 + 42;\n\nvoid SolveCase() {\n  $0\n}\n\nint32_t main() {\n  cin.tie(nullptr) -> sync_with_stdio(false);\n  int tt; cin >> tt;\n  while (tt--) SolveCase();\n}"
	},
	"Test Case clean": {
    "prefix": "test clean",
		"isFileTemplate": true,
		"body": "#include<bits/stdc++.h>\n\nint main() {\n  $0\n}\n"
	}
}